diff --git a/Makefile.in b/Makefile.in
index c3e1822d..da547dc8 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -124,7 +124,7 @@ all-link-flags := $(mcppbs-LDFLAGS) $(LDFLAGS)
 comma := ,
 LD            := $(CXX)
 LIBS          := @LIBS@ @BOOST_ASIO_LIB@ @BOOST_REGEX_LIB@
-LINK          := $(LD) -L. $(all-link-flags) -Wl,-rpath,$(install_libs_dir) $(patsubst -L%,-Wl$(comma)-rpath$(comma)%,$(filter -L%,$(LDFLAGS)))
+LINK          := $(LD) -L. $(all-link-flags) -Wl,-rpath,$(install_libs_dir)
 
 # Library creation
 
diff --git a/fesvr/tsi.h b/fesvr/tsi.h
index 825a3a00..e34ea4e3 100644
--- a/fesvr/tsi.h
+++ b/fesvr/tsi.h
@@ -26,7 +26,7 @@ class tsi_t : public htif_t
   uint32_t recv_word();
   void switch_to_host();
 
-  uint32_t in_bits() { return in_data.front(); }
+  uint32_t in_bits() { return in_data.empty() ? 0 : in_data.front(); }
   bool in_valid() { return !in_data.empty(); }
   bool out_ready() { return true; }
   void tick(bool out_valid, uint32_t out_bits, bool in_ready);
diff --git a/riscv/decode_macros.h b/riscv/decode_macros.h
index fee8ae7f..5e3a802d 100644
--- a/riscv/decode_macros.h
+++ b/riscv/decode_macros.h
@@ -111,7 +111,7 @@ do { \
     WRITE_FRD(value); \
   } \
 } while (0)
- 
+
 #define SHAMT (insn.i_imm() & 0x3F)
 #define BRANCH_TARGET (pc + insn.sb_imm())
 #define JUMP_TARGET (pc + insn.uj_imm())
@@ -193,6 +193,7 @@ do { \
 #define set_pc(x) \
   do { p->check_pc_alignment(x); \
        npc = sext_xlen(x); \
+       p->jump_hook(npc); \
      } while (0)
 
 #define set_pc_and_serialize(x) \
diff --git a/riscv/mmu.cc b/riscv/mmu.cc
index be24f40f..cc52abb0 100644
--- a/riscv/mmu.cc
+++ b/riscv/mmu.cc
@@ -131,8 +131,8 @@ reg_t reg_from_bytes(size_t len, const uint8_t* bytes)
 bool mmu_t::mmio_ok(reg_t paddr, access_type UNUSED type)
 {
   // Disallow access to debug region when not in debug mode
-  if (paddr >= DEBUG_START && paddr <= DEBUG_END && proc && !proc->state.debug_mode)
-    return false;
+  // if (paddr >= DEBUG_START && paddr <= DEBUG_END && proc && !proc->state.debug_mode)
+  //   return false;
 
   return true;
 }
@@ -491,7 +491,10 @@ reg_t mmu_t::walk(reg_t addr, access_type type, reg_t mode, bool virt, bool hlvx
 
     // check that physical address of PTE is legal
     auto pte_paddr = s2xlate(addr, base + idx * vm.ptesize, LOAD, type, virt, false);
+    // std::cerr << "PTE ADDR: " << std::hex << pte_paddr << "\n";
     reg_t pte = pte_load(pte_paddr, addr, virt, type, vm.ptesize);
+    // std::cerr << "PTE VAL: " << std::hex << pte << "\n";
+
     reg_t ppn = (pte & ~reg_t(PTE_ATTR)) >> PTE_PPN_SHIFT;
     bool pbmte = virt ? (proc->get_state()->henvcfg->read() & HENVCFG_PBMTE) : (proc->get_state()->menvcfg->read() & MENVCFG_PBMTE);
     bool hade = virt ? (proc->get_state()->henvcfg->read() & HENVCFG_HADE) : (proc->get_state()->menvcfg->read() & MENVCFG_HADE);
@@ -499,24 +502,36 @@ reg_t mmu_t::walk(reg_t addr, access_type type, reg_t mode, bool virt, bool hlvx
     if (pte & PTE_RSVD) {
       break;
     } else if (!proc->extension_enabled(EXT_SVNAPOT) && (pte & PTE_N)) {
+      // std::cerr << "[MMU ERR] SVNAPOT not enabled.\n";
       break;
     } else if (!pbmte && (pte & PTE_PBMT)) {
+      // std::cerr << "[MMU ERR] PBMT not enabled.\n";
       break;
     } else if ((pte & PTE_PBMT) == PTE_PBMT) {
+      // std::cerr << "[MMU ERR] PBMT.\n";
       break;
     } else if (PTE_TABLE(pte)) { // next level of page table
+      // std::cerr << "[MMU] Next level.\n";
+
       if (pte & (PTE_D | PTE_A | PTE_U | PTE_N | PTE_PBMT))
+      {
+        // std::cerr << "[MMU ERR] PBMT and all bits on.\n";
         break;
+      }
       base = ppn << PGSHIFT;
     } else if ((pte & PTE_U) ? s_mode && (type == FETCH || !sum) : !s_mode) {
+      // std::cerr << "[MMU ERR] FETCH error.\n";
       break;
     } else if (!(pte & PTE_V) || (!(pte & PTE_R) && (pte & PTE_W))) {
+      // std::cerr << "[MMU ERR] !(pte & PTE_V) || (!(pte & PTE_R) && (pte & PTE_W)).\n";
       break;
     } else if (type == FETCH || hlvx ? !(pte & PTE_X) :
                type == LOAD          ? !(pte & PTE_R) && !(mxr && (pte & PTE_X)) :
                                        !((pte & PTE_R) && (pte & PTE_W))) {
+      // std::cerr << "[MMU ERR] R/W/X error.\n";
       break;
     } else if ((ppn & ((reg_t(1) << ptshift) - 1)) != 0) {
+      // std::cerr << "[MMU ERR] misaligned?\n";
       break;
     } else {
       reg_t ad = PTE_A | ((type == STORE) * PTE_D);
@@ -527,6 +542,7 @@ reg_t mmu_t::walk(reg_t addr, access_type type, reg_t mode, bool virt, bool hlvx
           pte_store(pte_paddr, pte | ad, addr, virt, type, vm.ptesize);
         } else {
           // take exception if access or possibly dirty bit is not set.
+          // std::cerr << "[MMU ERR] Access/Dirty bit not set.\n";
           break;
         }
       }
@@ -535,8 +551,10 @@ reg_t mmu_t::walk(reg_t addr, access_type type, reg_t mode, bool virt, bool hlvx
       reg_t vpn = addr >> PGSHIFT;
 
       int napot_bits = ((pte & PTE_N) ? (ctz(ppn) + 1) : 0);
-      if (((pte & PTE_N) && (ppn == 0 || i != 0)) || (napot_bits != 0 && napot_bits != 4))
+      if (((pte & PTE_N) && (ppn == 0 || i != 0)) || (napot_bits != 0 && napot_bits != 4)) {
+        // std::cerr << "[MMU ERR] ((pte & PTE_N) && (ppn == 0 || i != 0)) || (napot_bits != 0 && napot_bits != 4).\n";
         break;
+      }
 
       reg_t page_base = ((ppn & ~((reg_t(1) << napot_bits) - 1))
                         | (vpn & ((reg_t(1) << napot_bits) - 1))
diff --git a/riscv/mmu.h b/riscv/mmu.h
index ef054cf5..c5e89098 100644
--- a/riscv/mmu.h
+++ b/riscv/mmu.h
@@ -68,6 +68,8 @@ public:
       load_slow_path(addr, sizeof(T), (uint8_t*)&res, xlate_flags);
     }
 
+    proc->load_hook(addr);
+
     if (unlikely(proc && proc->get_log_commits_enabled()))
       proc->state.log_mem_read.push_back(std::make_tuple(addr, 0, sizeof(T)));
 
@@ -102,6 +104,8 @@ public:
       store_slow_path(addr, sizeof(T), (const uint8_t*)&target_val, xlate_flags, true, false);
     }
 
+    proc->store_hook(addr);
+
     if (unlikely(proc && proc->get_log_commits_enabled()))
       proc->state.log_mem_write.push_back(std::make_tuple(addr, val, sizeof(T)));
   }
diff --git a/riscv/processor.cc b/riscv/processor.cc
index 330bd30c..d43ca186 100644
--- a/riscv/processor.cc
+++ b/riscv/processor.cc
@@ -31,7 +31,8 @@
 
 processor_t::processor_t(const isa_parser_t *isa, const cfg_t *cfg,
                          simif_t* sim, uint32_t id, bool halt_on_reset,
-                         FILE* log_file, std::ostream& sout_)
+                         FILE* log_file, std::ostream& sout_,
+                         uint64_t reset_start_addr)
   : debug(false), halt_request(HR_NONE), isa(isa), cfg(cfg), sim(sim), id(id), xlen(0),
   histogram_enabled(false), log_commits_enabled(false),
   log_file(log_file), sout_(sout_.rdbuf()), halt_on_reset(halt_on_reset),
@@ -69,7 +70,7 @@ processor_t::processor_t(const isa_parser_t *isa, const cfg_t *cfg,
   set_impl(IMPL_MMU_ASID, true);
   set_impl(IMPL_MMU_VMID, true);
 
-  reset();
+  reset(reset_start_addr);
 }
 
 processor_t::~processor_t()
@@ -186,9 +187,9 @@ static int xlen_to_uxl(int xlen)
   abort();
 }
 
-void state_t::reset(processor_t* const proc, reg_t max_isa)
+void state_t::reset(processor_t* const proc, reg_t max_isa, uint64_t reset_pc)
 {
-  pc = DEFAULT_RSTVEC;
+  pc = reset_pc;
   XPR.reset();
   FPR.reset();
 
@@ -547,10 +548,10 @@ void processor_t::enable_log_commits()
   log_commits_enabled = true;
 }
 
-void processor_t::reset()
+void processor_t::reset(uint64_t reset_start_addr)
 {
   xlen = isa->get_max_xlen();
-  state.reset(this, isa->get_max_isa());
+  state.reset(this, isa->get_max_isa(), reset_start_addr);
   state.dcsr->halt = halt_on_reset;
   halt_on_reset = false;
   VU.reset();
@@ -805,6 +806,8 @@ void processor_t::take_trap(trap_t& t, reg_t epc)
     return;
   }
 
+  trap_hook(t, epc);
+
   // By default, trap to M-mode, unless delegated to HS-mode or VS-mode
   reg_t vsdeleg, hsdeleg;
   reg_t bit = t.cause();
@@ -1158,3 +1161,69 @@ void processor_t::trigger_updated(const std::vector<triggers::trigger_t *> &trig
     }
   }
 }
+
+bool processor_t::is_inside_code_region(uint64_t addr) {
+  for (const auto& region: code_regions)
+    if (addr >= region.first && addr < region.second)
+      return true;
+
+  return false;
+}
+
+void processor_t::jump_hook(uint64_t newpc) {
+  auto tlb_entry = get_mmu()->translate_insn_addr(newpc);
+  newpc = tlb_entry.target_offset + newpc;
+
+  // Ignore boot code.
+  if (state.pc < code_regions[0].first)
+    return;
+  // Check for jumps to locations that are outside of the valid memory.
+  if (not is_inside_code_region(newpc)) {
+    illegal_jump_pc = newpc;
+    illegal_jump_type = OUTSIDE_VALID_MEM;
+    illegal_jump = true;
+  }
+  // Check for jumps to the next instruction or to the middle of it.
+  if ((newpc >= state.pc and newpc < state.pc + 8) or
+      (newpc < state.pc and newpc > state.pc - 8)) {
+    illegal_jump_pc = newpc;
+    illegal_jump_type = NEWPC_TOO_NEAR;
+    illegal_jump = true;
+  }
+  // Check for jumps to the middle of an instruction.
+  if (newpc % 4 != 0) {
+    illegal_jump_pc = newpc;
+    illegal_jump_type = NEWPC_UNALIGNED;
+    illegal_jump = true;
+  }
+}
+
+void processor_t::store_hook(uint64_t addr) {
+  if (state.pc < init_end)
+    return;
+
+  // Check if we are performing a store to the code region.
+  if (is_inside_code_region(addr))
+    self_modifying = true;
+
+  // TODO: this is a hack to handle virtual address 0, we should be
+  // translating to physical address before checking instead.
+  // if (addr <= max_pc-min_pc)
+  //   self_modifying = true;
+
+  for (auto &[start, end] : forbidden_regions) {
+    if (addr >= start and addr < end)
+      accessed_forbidden_region = true;
+  }
+}
+
+
+void processor_t::load_hook(uint64_t addr) {
+  if (state.pc < init_end)
+    return;
+
+  for (auto &[start, end] : forbidden_regions) {
+    if (addr >= start and addr < end)
+      accessed_forbidden_region = true;
+  }
+}
diff --git a/riscv/processor.h b/riscv/processor.h
index 8117568c..8f2f356a 100644
--- a/riscv/processor.h
+++ b/riscv/processor.h
@@ -3,6 +3,7 @@
 #define _RISCV_PROCESSOR_H
 
 #include "decode.h"
+#include "platform.h"
 #include "trap.h"
 #include "abstract_device.h"
 #include <string>
@@ -74,7 +75,7 @@ typedef std::vector<std::tuple<reg_t, uint64_t, uint8_t>> commit_log_mem_t;
 // architectural state of a RISC-V hart
 struct state_t
 {
-  void reset(processor_t* const proc, reg_t max_isa);
+  void reset(processor_t* const proc, reg_t max_isa, uint64_t reset_start_addr=DEFAULT_RSTVEC);
 
   reg_t pc;
   regfile_t<reg_t, NXPR, true> XPR;
@@ -183,7 +184,8 @@ class processor_t : public abstract_device_t
 public:
   processor_t(const isa_parser_t *isa, const cfg_t* cfg,
               simif_t* sim, uint32_t id, bool halt_on_reset,
-              FILE *log_file, std::ostream& sout_); // because of command line option --log and -s we need both
+              FILE *log_file, std::ostream& sout_,
+              uint64_t reset_start_addr=DEFAULT_RSTVEC); // because of command line option --log and -s we need both
   ~processor_t();
 
   const isa_parser_t &get_isa() { return *isa; }
@@ -193,7 +195,7 @@ public:
   void set_histogram(bool value);
   void enable_log_commits();
   bool get_log_commits_enabled() const { return log_commits_enabled; }
-  void reset();
+  void reset(uint64_t reset_start_addr=DEFAULT_RSTVEC);
   void step(size_t n); // run for n cycles
   void put_csr(int which, reg_t val);
   uint32_t get_id() const { return id; }
@@ -361,6 +363,45 @@ public:
 
   vectorUnit_t VU;
   triggers::module_t TM;
-};
+
+public: // ------------------ Filtering logic
+  enum IllegalJumpType {
+    NONE,
+    OUTSIDE_VALID_MEM,
+    NEWPC_TOO_NEAR,
+    NEWPC_UNALIGNED,
+    MISALIGNED_LOAD
+  };
+
+  uint64_t init_end;
+  std::vector<std::pair<uint64_t, uint64_t>> code_regions;
+  bool illegal_jump = false;
+  IllegalJumpType illegal_jump_type;
+  uint64_t illegal_jump_pc = 0;
+  bool is_inside_code_region(uint64_t addr);
+  void jump_hook(uint64_t newpc);
+
+  std::vector<std::pair<uint64_t, uint64_t>> forbidden_regions;
+  bool self_modifying = false;
+  bool accessed_forbidden_region = false;
+  void load_hook(uint64_t addr);
+  void store_hook(uint64_t addr);
+
+  bool illegal_inst = false;
+  bool unhandled_trap = false;
+  bool trap = false;
+  void trap_hook(trap_t &t, uint64_t epc) {
+    trap = true;
+
+    // Check if we reached an illegal instruction.
+    if (t.cause() == CAUSE_ILLEGAL_INSTRUCTION)
+      illegal_inst = true;
+
+    // Check if MTVEC is not initialized. In this case, trapping would cause
+    // an infinite loop.
+    if (state.mtvec->read() == 0)
+      unhandled_trap = true;
+  }
+ };
 
 #endif
